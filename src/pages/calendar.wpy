
<template>
  <view>
   <singleCalendar @hanleConfirm.user="hanleConfirm" @handlenextmonth.user="handlenextmonth" @handleprevmonth.user="handleprevmonth" :list.sync="list" color="#278BFF"></singleCalendar>
   <view class="downlist">
    <view class="addbutton">
       <view>
       当日日程：{{nowtime?nowtime:""}}
     </view>
      <van-icon bindtap="newricheng" name="add" size="30px" color="#438df7" />
    </view>
    <view class="content">
     <van-cell-group>
            <van-cell wx-if="{{nowtimelist.length>0}}" wx:for="{{nowtimelist}}" id="{{item.id}}" wx:key="index" title="{{item.name}}" is-link bind:click="viewricheng"/>
      </van-cell-group>
     </view>
    </view>

    <van-popup
   show="{{ show }}"
  closeable
  close-icon="close"
  position="bottom"
  custom-style="height: 100%"
  bind:close="onClose"
  z-index="500"
>
<view class="popcentext">
  <van-nav-bar
  title="日程信息"
  left-text="返回"
  left-arrow
  bind:click-left="onClickLeft"
/>
<viewcalendar wx:if="{{isview}}"></viewcalendar><view wx:else></view>
<editcalendar wx:if="{{isedit}}"></editcalendar><view wx:else></view>
</view>
</van-popup>

   </view>
</template>

<script>
import wepy from "wepy";
import Calendar from "wepy-com-calendar";
import { connect } from "wepy-redux";
import singleCalendar from "@/components/singleCalendar";
import viewcalendar from "@/components/viewcalendar";
import moment from "moment";
import { stringify } from "qs";

@connect({})
export default class calendar extends wepy.page {
  config = {
    usingComponents: {
      "van-icon": "../../static/plugIn/icon/index",
      "van-popup": "../../static/plugIn/popup/index",
      "van-cell": "../../static/plugIn/cell/index",
      "van-cell-group": "../../static/plugIn/cell-group/index",
      "van-nav-bar": "../../static/plugIn/nav-bar/index",
      "van-field": "../../static/plugIn/field/index"
    }
  };
  props = {};
  data = {
    list: [],
    nowtime: null,
    nowtimelist: [],
    show: false,
    calendarinfo: {},
    isview: false,
    isedit: false,
    userlist: []
  };
  components = {
    singleCalendar,
    viewcalendar
  };
  onLoad() {
    this.nowtime = moment().format("YYYY-MM-DD");
    this.getlist();
    this.getuserlis();
  }
  getlist(
    start = moment()
      .startOf("month")
      .format("YYYY-MM-DD"),
    end = moment()
      .endOf("month")
      .format("YYYY-MM-DD")
  ) {
    const param = {
      Function: {
        Args: ["", "ReceptionDateTime", "Site", "Venue", "Customer"]
      },
      StartDate: start,
      EndDate: end
    };
    let token = wx.getStorageSync("token");

    wx.request({
      url: `http://localhost:5000/ERP/BPM/Task/Read/Query?${stringify(param, {
        allowDots: true,
        encodeValuesOnly: true
      })}`,
      method: "POST",
      header: {
        "content-type": "application/x-www-form-urlencoded",
        Authorization: `Bearer ${token}`
      },
      success: res => {
        if (res && res) {
          this.list = res.data.rows;
          this.$broadcast("getlist", res.data.rows);
        }
      },
      fail: err => {
        console.log(err);
      }
    });
  }
  getuserlis() {
    let token = wx.getStorageSync("token");
    wx.request({
      url: `http://localhost:5000/ERP/AVM/User/Read/Rows`,
      method: "POST",
      header: {
        "content-type": "application/x-www-form-urlencoded",
        Authorization: `Bearer ${token}`
      },
      success: res => {
        if (res && res.data) {
          this.userlist = res.data;
        }
      },
      fail: err => {
        console.log(err);
      }
    });
  }
  methods = {
    onClickLeft() {
      this.show = false;
      this.isedit = false;
      this.isview = false;
    },
    hanleConfirm(e) {
      this.nowtime = e.formatDay;
      let cflist = [];
      for (let i of this.list) {
        if (moment(i.receptionDateTime).format("YYYY-MM-DD") == e.formatDay) {
          cflist.push(i);
        }
      }
      this.nowtimelist = cflist;
    },
    handlenextmonth(datetime) {
      let start = moment(datetime)
        .startOf("month")
        .format("YYYY-MM-DD");
      let end = moment(datetime)
        .endOf("month")
        .format("YYYY-MM-DD");
      this.getlist(start, end);
    },
    handleprevmonth(datetime) {
      let start = moment(datetime)
        .startOf("month")
        .format("YYYY-MM-DD");
      let end = moment(datetime)
        .endOf("month")
        .format("YYYY-MM-DD");
      this.getlist(start, end);
    },
    newricheng() {
      wepy.navigateTo({
        url: "newtask"
      });
    },
    viewricheng(e) {
      this.isview = true;
      this.show = true;
      let taskinfo = this.list.filter(p => p.id == e.target.id)[0];
      taskinfo.duijieren = this.userlist.filter(p=>p.id==taskinfo.receptionId)[0].realName
  
      this.$broadcast(
        "getcalendarinfo",
       taskinfo
      );
    },
    onClose() {
      this.show = false;
      this.isedit = false;
      this.isview = false;
    }
  };
}
</script>
<style scoped lang="less">
.downlist {
  border: 1px solid #eeeeee;
  background-color: white;
  height: 300px;
}
.addbutton {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}
.content {
  border: 1px solid #eeeeee;
  height: 100%;
  overflow-y: auto;
}
.popcentext {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}
</style>
